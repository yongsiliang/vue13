# 这是一个NB的项目

## 牛不牛逼， 用心去感受，每一行代码中的诗情雅意

### 我们是有灵魂程序员，所以，我们的代码富有诗意；

#### 丫的，实在编不下去了,哈哈哈

## [主流开源协议之间有何异同？](https://www.zhihu.com/question/19568896)

## 用(传统方式)命令行把修改过后的代码上传到码云？？？
1. git add .
2. git commit -m "提交信息"
3. git push

## 制作首页App组件
1. 完成 Header 区域，使用的是 Mint-UI 中的Header组件
2. 制作底部的 Tabbar 区域，使用的是 MUI 的 Tabbar.html
 + 在制作 购物车 小图标的时候，操作会相对多一些：
 + 先把 扩展图标的 css 样式，拷贝到 项目中
 + 拷贝 扩展字体库 ttf 文件，到项目中
 + 为 购物车 小图标 ，添加 如下样式 `mui-icon mui-icon-extra mui-icon-extra-cart`
3. 要在 中间区域放置一个 router-view 来展示路由匹配到的组件

## 改造 tabbar 为 router-link

## 设置路由高亮

## 点击 tabbar 中的路由链接，展示对应的路由组件

## 制作首页轮播图布局

## 加载首页轮播图数据
1. 获取数据， 如何获取呢， 使用 vue-resource
2. 使用 vue-resource 的 this.$http.get 获取数据
3. 获取到的数据，要保存到 data 身上
4. 使用 v-for 循环渲染 每个 item 项

## 改造 九宫格 区域的样式

## 改造 新闻资讯 路由链接

## 新闻资讯 页面 制作
1. 绘制界面， 使用 MUI 中的 media-list.html
2. 使用 vue-resource 获取数据
3. 渲染真实数据

## 实现 新闻资讯列表 点击跳转到新闻详情
1. 把列表中的每一项改造为 router-link,同时，在跳转的时候应该提供唯一的Id标识符
2. 创建新闻详情的组件页面  NewsInfo.vue
3. 在 路由模块中，将 新闻详情的 路由地址 和 组件页面对应起来

## 实现 新闻详情 的 页面布局 和数据渲染

## 单独封装一个 comment.vue 评论子组件
1. 先创建一个 单独的 comment.vue 组件模板
2. 在需要使用 comment 组件的 页面中，先手动 导入 comment 组件
 + `import comment from './comment.vue'`
3. 在父组件中，使用 `components` 属性，将刚才导入 comment 组件，注册为自己的 子组件
4. 将注册子组件时候的，注册名称，以 标签形式，在页面中 引用即可

## 获取所有的评论数据显示到页面中

## 实现点击加载更多评论的功能
1. 为加载更多按钮，绑定点击事件，在事件中，请求 下一页数据
2. 点击加载更多，让 pageIndex++ , 然后重新调用 this.getComments() 方法重新获取最新一页的数据
3. 为了防止 新数据 覆盖老数据的情况，我们在 点击加载更多的时候，每当获取到新数据，应该让 老数据 调用 数组的 concat 方法，拼接上新数组


##发表评论
1：把文本框做双向数据绑定
2：为发表按钮绑定一个事件
3.校验评论内容是否为空，如空，则Toast提示用户，评论内容不能为空
4.通过vue-resource 发送一个请求，帮评论内容提功给 服务器
5.当发表评论ok 后，重新刷新列表，以查看最新评论
  +如果调用getcomments 方法重新刷新评论列表的话，可能得到最后一页的评论，前几的评论获取不到
  +换一种思路：当评论成功后，在客户端手动拼接一个最新的评论，然后使用数组的unshift方法，把最新的评论，追加到 data 的comments 的开头，这样就可以实现刷新列表的需求

改造 图片分享 组件页面

##绘制 图片列表 组件页面结构并美化样式
1：制作 顶部划动条
2：制作 底部图片列表
###制作顶部划动条 的坑
1：使用 mui 中的 tab-webview-main.html
2:需要把slider 区域的mui-fullscreen 类去掉 
3.滑动条无法正常触发划动，通过官方文件，发现这是js组件，需要初始化
	+导入mui.js
	+调用官方提供的方式去初始化
	```
	mui('.mui-scroll-wrapper').scroll({
	deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢	，滚动距离越小，默认值0.0006
	});
	```
4.在初始滑动条时候，导入mui.js 发现出现错误
`Uncaught TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them`
	+经过推测，觉得可能是mui.js中用到了caller', 'callee', and 'arguments'，但是 webpack 打包好的buddle.js默认是启用严格模式，所以两者冲突了；
	+解决方案：1.把mui.js中的非严格模式的代码改掉，但是不现实
		    2. 把webpack 打包时候的严格模式禁用掉；
			https://github.com/genify/babel-plugin-transform-remove-strict-mode

5.刚进入图片分享的时候，滑动条无法正常工作，经分析，如果要初始化滑动条，必须等Dom 元素加载完毕，所以，我把初始化滑动条的代码搬到了 mounted 生命周期函数中

6.当滑动条调试成功后，发现Tabbar 无法正常工作，这时候，我们需要把每个Tabbar 按钮的样式中 `mui-tab-item` 重新改一下名字；

7.获取所有分类，并渲染 分类列表

### 制作图片列表区域
1.图片列表使用懒加载技术，我们可以使用 mint-ui 提供的现成组件` lazy-load`
2.根据`lazy-load`的文档尝试使用
3.渲染图片列表数据

###实现图片列表 懒加载改造和样式美化
1.在改造 li 成 router-link 的时候，需要 使用tag 属性指定要渲染为哪种元素


##实现详情页的布局和美化，同时，获取数据渲染页面


##实现 图片详情 中缩略图的功能
1.使用插件 vue-preview这个缩略图插件
2.获取所有图片列表，然后使用 v-for 指令渲染
3.注意：img上的class不能去掉


4.每个图片数据对象中，必须有 w 和 h 属性


##绘制商品列表 页面基本结构并美化